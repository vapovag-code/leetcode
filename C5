5. Longest Palindromic Substring [medium]
//substring function generated by chat gpt 
//i can understand what it does, i asked it for the C equivalent of string[n:m] 
//be careful about small code errors! it is okay to use the test cases but you miss too many submits because of stupid and avoidable mistakes 

char* substring(const char* src, size_t start, size_t end) {
    if (end < start || start >= strlen(src))
        return NULL; // invalid range

    size_t len = end - start;
    char *dest = malloc(len + 1); // +1 for '\0'
    if (!dest) return NULL;

    strncpy(dest, src + start, len);
    dest[len] = '\0'; // manually add terminator

    return dest; // caller must free()
}

char* longestPalindrome(char* s) {
    int L, M, R; 
    int stringLength = strlen(s);
    int _max = 1;  
    int index = 0;
    M = 0; 
    while (M < stringLength*2){ 
        if (M % 2 == 0) { 
            L = M/2; R = M/2; 
        } else { 
            L = M/2 + 1; R = M/2; 
        }
        while (L > 0 && R < stringLength - 1 && s[L-1] == s[R+1]){ 
            L--; R++; 
            if (_max < R - L + 1) { 
                _max = R - L + 1;
                index = L; 
            }
            //printf("M %.1f L %d R %d _max %d index %d\n", (float)M/2., L, R, _max, index);
        }
        M++; 
    }
    return substring(s, index, index+_max); 
}
