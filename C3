3. Longest Substring Without Repeating Characters [medium]

/*great exercise to code a hashtable from scratch 
again the size of the hash table and the hash function have immediate impact on the performance 
also a great illustration of the sliding window concept (non-fixed size)
*/

#define SIZE 256

typedef struct node { 
    int value; 
    struct node* next;
} node; 

void printList(node* head){ 
    node* current = head; 
    while (current != NULL){ 
        printf("%c - ", current -> value); 
        current = current -> next; 
    }
    printf("#\n");
    return;
}

void printHashSet(node** hs, int size){ 
    for (int i = 0; i < size; i++){ 
        printf("[%d]: ", i);
        printList(hs[i]);
    }
    return;
}

node** initialize(int size){ 
    node** hs = malloc(sizeof(node*)*size); 
    for (int i = 0; i < size; i++){ 
        hs[i] = NULL; 
    }
    return hs;
}

int abs(int y){ 
    if (y < 0) return -y; 
    return y;
}

int hashFunction(int x){ 
    return x % SIZE;
}

node* addToLinkedList(node* head, int value){ 
    node* current = head; 
    node* newnode = malloc(sizeof(node));
    newnode -> value = value; 
    newnode -> next = NULL;
    if (current == NULL){ 
        return newnode;
    }
    while (current -> next != NULL){ 
        current = current -> next; 
    }
    current -> next = newnode; 
    return head;
}

node* removeInLinkedList(node* head, int value){
    node* current = head; 
    if (head -> value == value) return head -> next;
    while (current -> next != NULL){ 
        if (current -> next -> value == value){ 
            current -> next = current -> next -> next; 
        }
    }
    return head;
}

void removeFromHashSet(node** hs, int value){ 
    int hf = hashFunction(value); 
    hs[hf] = removeInLinkedList(hs[hf], value); 
    return;
}

void addToHashSet(node** hs, int value){ 
    int hf = hashFunction(value); 
    hs[hf] = addToLinkedList(hs[hf], value);
    return;
}

bool inLinkedList(node* head, int value){
    node* current = head; 
    while (current != NULL){ 
        if (current -> value == value) return true; 
        current = current -> next; 
    }
    return false;
}

bool inHashSet(node** hs, int value){ 
    int hf = hashFunction(value);
    return inLinkedList(hs[hf], value);
}

int mymax(int a, int b){ 
    if (a > b) return a;
    return b;
}

int lengthOfLongestSubstring(char* s) {
    int length = strlen(s);
    node** hs = initialize(SIZE); 
    
    int L = 0, R = 0, M=0; 
    while (L < length){ 
        int hf = hashFunction(s[R]);
        if (inHashSet(hs, s[R])){ 
            removeFromHashSet(hs, s[L]);
            L++;
        }
        else{
            addToHashSet(hs, s[R]);
            R++; 
        }
        M = mymax(M, R-L);
        //printf("L:%d R:%d M:%d\n", L, R, M);
        if (R == length){ 
            L = length;
        }
    }
    return M;
}
